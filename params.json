{"name":"JSON Test","tagline":"Simple testing for JSON-based applications","body":"JSONTest.com is a testing platform for services utilizing JavaScript Object Notation (JSON). To use, make a request to **servicename**.jsontest.com, where **servicename** is the name of a service listed below. We also support a number of parameters, such as **callback**, allowing you to test Javascript and other web applications. For example, try this: http://ip.jsontest.com/?callback=showMyIP\r\n\r\nServices\r\n\r\n1. blank\r\n\r\n* lanl\r\n\r\n\r\n\r\n1.   [IP Address](#ip)\r\n2. [HTTP Headers](#headers)\r\n3. [Date & Time](#date)\r\n4. [Echo JSON](#echo)\r\n5. [Validate](#validate)\r\n6. [Arbitrary JS Code](#code)\r\n7. [Cookie](#cookie)\r\n8. [Malformed JSON](#malformed)\r\n9. [MD5](#md5)\r\n\r\nParameters\r\n1. [Callback](#callback)\r\n2. [Allow Origin](#alloworigin)\r\n3. [MIME](#mime)\r\n\r\n## Services\r\n\r\n### <a id=\"ip\"></a> IP Address \r\n\r\nCalling http://ip.jsontest.com/ will return your IP address in JSON form. Example:\r\n\r\n```json\r\n{\"ip\": \"8.8.8.8\"}\r\n```\r\n\r\nEndpoint: http://ip.jsontest.com/\r\n\r\n### <a id=\"headers\"></a> Headers\r\n\r\nReturns the HTTP request headers received from the client.\r\n\r\n```json\r\n{\r\n   \"Accept-Language\": \"en-US,en;q=0.8\",\r\n   \"Host\": \"headers.jsontest.com\",\r\n   \"Accept-Charset\": \"ISO-8859-1,utf-8;q=0.7,*;q=0.3\",\r\n   \"Accept\": \"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\"\r\n}\r\n```\r\n\r\nEndpoint: http://headers.jsontest.com/\r\n\r\n\r\n### <a id=\"date\"></a> Date & Time\r\n\r\nReturns a JSON object with the current date and time in human-readable form, and the current number of milliseconds since UNIX epoch (this is equivalent to the Javascript call `(new Date()).getTime()` ).\r\n\r\nDate and time are expressed using the GMT time zone. \r\n\r\n```json\r\n{\r\n   \"time\": \"03:53:25 AM\",\r\n   \"milliseconds_since_epoch\": 1362196405309,\r\n   \"date\": \"03-02-2013\"\r\n}\r\n```\r\n\r\nEndpoint: http://date.jsontest.com (or http://time.jsontest.com )\r\n\r\n### <a id=\"echo\"></a> Echo JSON\r\n\r\nReturns a customized JSON object that you can define through a REST-style URL. For example, calling http://echo.jsontest.com/key/value/one/two will return the following JSON:\r\n\r\n```json\r\n{\r\n   \"one\": \"two\",\r\n   \"key\": \"value\"\r\n}\r\n```\r\n\r\nEndpoint: http://echo.jsontest.com/insert-key-here/insert-value-here/key/value\r\n\r\n### <a id=\"validate\"></a> Validation\r\n\r\nValidates a given JSON object against the org.json reference parser. To use, tack a JSON string to a **json** parameter, as in: [http://validate.jsontest.com/?json={\"key\":\"value\"}](http://validate.jsontest.com/?json={\"key\":\"value\"}); this returns the following JSON:\r\n\r\n```json\r\n{\r\n   \"object_or_array\": \"object\",\r\n   \"empty\": false,\r\n   \"parse_time_nanoseconds\": 19608,\r\n   \"validate\": true,\r\n   \"size\": 1\r\n}\r\n```\r\n\r\nIf the JSON object was parsed successfully, the **validate** parameter will be set to true. The **size** parameter counts the number of top level keys inside the JSON object. **Empty** is true if the JSON object has no key:value pairs, false if there is at least 1 pair. **Parse_time_nanoseconds** counts how long the org.json parser took to parse the JSON text.\r\n\r\nIf invalid JSON is passed in, the **validate** parameter will be false, and an explanation of why parsing failed will be added. The explanation is taken directly from the org.json parser Exception message. As an example, suppose we tried to validate **{\"key\":\"value\"** (this JSON is incorrect because it misses the closing **}** brace). We can validate by going to [http://validate.jsontest.com/?json={\"key\":\"value\"](http://validate.jsontest.com/?json={\"key\":\"value\") . Here's the result:\r\n\r\n```json\r\n{\r\n   \"error\": \"Expected a ',' or '}' at 15 [character 16 line 1]\",\r\n   \"object_or_array\": \"object\",\r\n   \"error_info\": \"This error came from the org.json reference parser.\",\r\n   \"validate\": false\r\n}\r\n```\r\n\r\nNote: GET requests are supported, though not recommended while using this service. You should use POST requests if possible. \r\n\r\nTop-level JSON arrays can also be passed in; if so, the **object_or_array** parameter will be set to true, and the **size parameter** counts the number of elements within the array. For instance, parsing the array **[1,2,3]** will return the following JSON: \r\n\r\n```json\r\n{\r\n   \"object_or_array\": \"array\",\r\n   \"empty\": false,\r\n   \"parse_time_nanoseconds\": 127664,\r\n   \"validate\": true,\r\n   \"size\": 3\r\n}\r\n```\r\n\r\nEndpoint: http://validate.jsontest.com/?json=[JSON-code-to-validate]\r\n\r\n### <a id=\"code\"></a> Arbitrary JS Code\r\n\r\nJSONP is not just JSON; it is a JSON object wrapped inside a Javascript function call. However, JSONP is not just limited to function calls; you may embed any Javascript code needed.\r\n\r\nThis service sends back JS code to create two alerts(), one that shows your IP address, and one that shows the current time in milliseconds. An example is below:\r\n\r\n```javascript\r\nArbitrary JS code here\r\n```\r\n\r\nIf you specify a callback string, it will be included in a third alert prompt.\r\n\r\n```javascript\r\nArbitrary JS code here\r\nJSONP function call (at end) with ip and user agent info.\r\n```\r\n\r\nEndpoint: http://code.jsontest.com\r\n\r\n### <a id=\"cookie\"></a> Cookie\r\n\r\nSets a cookie with a name of **jsontestdotcom**, containing a value of the current time in milliseconds. The server will then return the following JSON:\r\n\r\n```json\r\n{\"cookie_status\": \"Cookie set with name jsontestdotcom\"}\r\n```\r\n\r\nEndpoint: http://cookie.jsontest.com/\r\n\r\n### <a id=\"malformed\"></a> Malformed JSON\r\n\r\nReturns damaged/malformed JSON to the client. The returned JSON object will display your client IP address, but will be missing the final **}** brace - making it invalid JSON.\r\n\r\n```json\r\nexample of malformed JSON\r\n```\r\n\r\nEndpoint: http://malformed.jsontest.com/\r\n\r\n\r\n### <a id=\"md5\"></a> MD5\r\n\r\nReturns the MD5 hash code of a given string. To use, call http://md5.jsontest.com/?text=example_text, where **example_text** is the text that you want the MD5 hash for. For example, the above request would return:\r\n\r\n```json\r\n{\r\n   \"md5\": \"fa4c6baa0812e5b5c80ed8885e55a8a6\",\r\n   \"original\": \"example_text\"\r\n}\r\n```\r\n\r\nEndpoint: http://md5.jsontest.com/?text=[text to MD5]\r\n\r\n\r\n## <a id=\"parameters\"></a> Optional Parameters\r\n\r\nThe parameters below work on all of the above services. \r\n\r\n### <a id=\"callback\"></a> Callbacks\r\n\r\nFor JSONP applications to work, they need to be able to specify a callback parameter. You can specify a callback parameter by appending **?callback=[function_name]**, where **[function_name]** represents the Javascript function name to send the JSON object to.\r\n\r\nFor example, calling http://ip.jsontest.com/?callback=showIP will return this response:\r\n\r\n```javascript\r\nshowIP({\"ip\": \"208.97.218.10\"});\r\n```\r\n\r\n### <a id=\"alloworigin\"></a> Access-Control-Allow-Origin Header\r\n\r\nMost web applications run in a sandbox, preventing them from accessing content from different web sites. Servers that host content and APIs available to external applications must specify which apps are allowed by setting the Access-Control-Allow-Origin header. \r\n\r\nBy default, JSONTest.com sets this header to ` * `, meaning that any web application regardless of its origin url (such as localhost) can communicate with the server. You can turn this header off by adding the parameter **?alloworigin=false** to any service listed above. It is NOT recommended that you use this functionality; this should only be used for testing your application's ability to gracefully degrade. \r\n\r\nMore information can be found at [W3C Cross-Origin Resource Sharing](http://www.w3.org/TR/cors/) and [Mozilla: HTTP Access Control](https://developer.mozilla.org/en-US/docs/HTTP_access_control).\r\n\r\n### <a id=\"mime\"></a> MIME Type\r\n\r\nJSONTest.com follows IETF and IANA recommendations for the MIME type of JSON content: JSON content is set to \"application/json\" and JSONP content is declared as \"application/javascript\". See [IANA Media Types](http://www.iana.org/assignments/media-types/application/index.html), [IETF RFC 4627 (JSON Specification)](http://www.ietf.org/rfc/rfc4627.txt), and [IETF RFC 4329 (Scripting Media Types)](http://www.rfc-editor.org/rfc/rfc4329.txt) for further documentation.\r\n\r\nHowever, you may want to set other media types for your application. For any service listed above, you may change its media type by setting the parameter **?mime=[mime-int]**, where **[mime-int]** is a number from the list below:\r\n\r\n1. application/json\r\n2. application/javascript\r\n3. text/javascript\r\n4. text/html\r\n5. text/plain\r\n\r\nFor instance, calling http://ip.jsontest.com/?mime=5 would return your IP address within a JSON object with a MIME type of text/plain.\r\n\r\n### Services\r\n\r\nIt is recommended that you use the **servicename**.jsontest.com URL syntax while accessing JSONTest.com services. However, if you wish to specify the service required using a parameter, you may do so. Simply append `?service=**[servicename]** to any JSONTest endpoint. For instance, calling [http://date.jsontest.com/?service=ip](http://date.jsontest.com/?service=ip) will return your IP address.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}